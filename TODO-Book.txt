


Revise Introduction:
 Include a section on programming language paradigms, Procedural, Functional, Object Oriented, etc. (this may already be there)

Analogies:
 Periods end sentences -> semicolons end executable lines
 Paragraphs are separated by lines -> blocks are demarcated with curly brackets
 Shakespearian plays are annotated: lines needing more explanation have
  footnotes; but not all lines need explaining -> comments should be used
  to document important or unclear things; code itself should be self-documenting

Add a quote:
 Because of the low-level nature of C, you can really get yourself
 in trouble and the language will let you.  In contrast, some language
 C is the kind of language that if you tell it you want to shoot
 yourself in the foot, it will ask you ``what caliber’’?   
 In contrast, some more ``managed'' languages will ask you, are you
 really sure you want to do that?


155 Book
 -transfer word notes
 -gather exercises
 -Exercise ideas: http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/
  Leenkiat:
   http://cse.unl.edu/~lksoh/Classes/CSCE155N_Spring13/homeworks.html
   http://cse.unl.edu/~lksoh/Classes/CSCE155N_Fall12/homeworks.html





C: malloc:

issues like this can invoke holy wars

to cast or not to cast?

not necessary in pure C

will do it:
clarity and intent is more important than brevity
more importantly: its necessary in C++, doing so allows you to use either compiler

more:
http://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc